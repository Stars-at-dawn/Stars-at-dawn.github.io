<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晨星的博客</title>
  
  
  <link href="https://rkdkxvnn.github.io/atom.xml" rel="self"/>
  
  <link href="https://rkdkxvnn.github.io/"/>
  <updated>2024-05-30T03:39:32.625Z</updated>
  <id>https://rkdkxvnn.github.io/</id>
  
  <author>
    <name>长夜有晨星</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>打印汉诺塔过程</title>
    <link href="https://rkdkxvnn.github.io/2024/05/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/"/>
    <id>https://rkdkxvnn.github.io/2024/05/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/</id>
    <published>2024-05-30T03:37:03.000Z</published>
    <updated>2024-05-30T03:39:32.625Z</updated>
    
    <content type="html"><![CDATA[<p><strong>用代码实现 打印汉诺塔最优解的过程</strong></p><p>废话少说咱们直接开始(‾◡◝)</p><p>首先先来看看汉诺塔问题的定义：</p><p>汉诺塔（Tower of Hanoi），又称河内塔，是一个源于<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%8D%B0%E5%BA%A6/121904?fromModule=lemma_inlink">印度</a>古老传说的<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E7%9B%8A%E6%99%BA%E7%8E%A9%E5%85%B7/223159?fromModule=lemma_inlink">益智玩具</a>。大<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E6%A2%B5%E5%A4%A9/2453640?fromModule=lemma_inlink">梵天</a>创造世界的时候做了三根<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E9%87%91%E5%88%9A%E7%9F%B3/80698?fromModule=lemma_inlink">金刚石</a>柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%A4%A7%E6%A2%B5%E5%A4%A9/711550?fromModule=lemma_inlink">大梵天</a>命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。[<a href="https://www.zhihu.com/people/10-16-96-85/posts#ref_1">1]</a></p><p>那我们简化一下问题：变成三个圆盘，毕竟我们也买不起这么多黄金圆盘</p><p>（才不是我懒<del>(￣▽￣)</del>*）</p><p>如图我们要移动三个圆盘到最边上，而且小圆盘上不能放大圆盘</p><p><img src="https://pic3.zhimg.com/80/v2-be4e82ef46d6c2569a68d49a34311806_1440w.webp" alt="img"></p><p>那我们分析要让所用圆盘移到右边，很显然根据规则可以知道<strong>最下面的圆盘</strong>肯定要<strong>先移到最右边</strong>，不然移动别的大的就放不下了；</p><p>同时也可以看出：</p><p>要让最下面的圆盘移到最右边，就要让<strong>它上面的圆盘移到中间</strong>（就像把大象塞进冰箱要怎么办的问题一样）</p><p>顺着思路也就可以分析它上面的圆盘移到中间的问题，如果把<strong>中间的杆子当成右边的（即目标杆）</strong>，那问题就变成两层的汉诺塔问题了（底层的那个金盘你会发现有没有都无所谓），那就很显然是一个递归问题了，下面直接写代码（本文采用java）：</p><p>（写递归就写过程，不要去太纠结结果）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让所用圆盘移到右边    </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">leftToRight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//basecase</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;move&quot;</span> + n + <span class="string">&quot;left to right&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        leftToMid(n - <span class="number">1</span>);<span class="comment">//让它上面的圆盘移到中间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;move&quot;</span> + n + <span class="string">&quot;left to right&quot;</span>);</span><br><span class="line">        midToRight(n - <span class="number">1</span>);<span class="comment">//让它上面的圆盘从中间移到右边完成整个过程</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同理写出 leftToMid(n -1) midToRight(n -1)的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">leftToMid</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;move&quot;</span> + n + <span class="string">&quot;left to mid&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       leftToRight(n - <span class="number">1</span>);<span class="comment">//都是一样的</span></span><br><span class="line">       System.out.println(<span class="string">&quot;move&quot;</span> + n + <span class="string">&quot;left to mid&quot;</span>);</span><br><span class="line">       rightToMid(n - <span class="number">1</span>);<span class="comment">//完成整个过程</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rightToMid</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;move&quot;</span> + n + <span class="string">&quot;right to mid&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       rightToLeft(n - <span class="number">1</span>);<span class="comment">//都是一样的</span></span><br><span class="line">       System.out.println(<span class="string">&quot;move&quot;</span> + n + <span class="string">&quot;right to mid&quot;</span>);</span><br><span class="line">       leftToMid(n - <span class="number">1</span>);<span class="comment">//完成整个过程</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其它的从左从中间。。。我想应该不用我写了把（才不是我懒o(^▽^)o）</p><p>但这么长显然代码并不好看，而且能发现递归过程有大量共性，考虑优化一下</p><p>将当前位置和目标位置抽象出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当前位置和目标位置 还有剩余位置抽象出来   </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fromTo</span><span class="params">(String from, String other, String to, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;move&quot;</span> + n + from + <span class="string">&quot; to &quot;</span> + to);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fromTo(from, to, other, n - <span class="number">1</span>);<span class="comment">//other 和 to交换位置 代表当前圆盘的上面的圆盘移到剩余位置</span></span><br><span class="line">        System.out.println(<span class="string">&quot;move&quot;</span> + n + from + <span class="string">&quot; to &quot;</span> + to);</span><br><span class="line">        fromTo(other, from, to, n - <span class="number">1</span>);<span class="comment">//代表当前圆盘的上面的圆盘移到目标位置</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>大功告成，我相信你也对递归有了更好的理解了吧</p><p>不过有个小彩蛋，那就是你会发现这个递归次数成指数增长 得出公式 2𝑛−1 （不证了，懒~）</p><p>所以64片黄金圆盘需要移动 18446744073709551615 次？？？那故事里的金盘移动完怕不是地球都没了</p><p>( ‵▽′)ψ</p><p>（ps：第一次写，如果有什么不好的欢迎指出( •̀ ω •́ )y）下次见</p><p>每日一句：</p><p>上善若水，水善利万物而不争。[<a href="https://www.zhihu.com/people/10-16-96-85/posts#ref_2">2]</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.zhihu.com/people/10-16-96-85/posts#ref_1_0">^</a>百度百科</li><li><a href="https://www.zhihu.com/people/10-16-96-85/posts#ref_2_0">^</a>老子《道德经》</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;用代码实现 打印汉诺塔最优解的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;废话少说咱们直接开始(‾◡◝)&lt;/p&gt;
&lt;p&gt;首先先来看看汉诺塔问题的定义：&lt;/p&gt;
&lt;p&gt;汉诺塔（Tower of Hanoi），又称河内塔，是一个源于&lt;a href=&quot;https://l</summary>
      
    
    
    
    <category term="算法" scheme="https://rkdkxvnn.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="经典算法" scheme="https://rkdkxvnn.github.io/tags/%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95/"/>
    
    <category term="汉诺塔" scheme="https://rkdkxvnn.github.io/tags/%E6%B1%89%E8%AF%BA%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>推荐关注</title>
    <link href="https://rkdkxvnn.github.io/2024/05/27/%E6%8E%A8%E8%8D%90%E5%85%B3%E6%B3%A8/"/>
    <id>https://rkdkxvnn.github.io/2024/05/27/%E6%8E%A8%E8%8D%90%E5%85%B3%E6%B3%A8/</id>
    <published>2024-05-27T14:04:20.000Z</published>
    <updated>2024-05-29T12:53:36.159Z</updated>
    
    <content type="html"><![CDATA[<p>B站</p><p><strong>老陌Ss</strong> UID：1343324216</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;B站&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;老陌Ss&lt;/strong&gt; UID：1343324216&lt;/p&gt;
</summary>
      
    
    
    
    <category term="推荐" scheme="https://rkdkxvnn.github.io/categories/%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="推荐博主关注" scheme="https://rkdkxvnn.github.io/tags/%E6%8E%A8%E8%8D%90%E5%8D%9A%E4%B8%BB%E5%85%B3%E6%B3%A8/"/>
    
  </entry>
  
  <entry>
    <title>学成在线项目介绍</title>
    <link href="https://rkdkxvnn.github.io/2024/05/27/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>https://rkdkxvnn.github.io/2024/05/27/%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</id>
    <published>2024-05-27T14:04:20.000Z</published>
    <updated>2024-05-29T06:48:51.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学成在线"><a href="#学成在线" class="headerlink" title="学成在线"></a>学成在线</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>本项目基于<strong>黑马程序员</strong>的 <em>《学成在线》</em> 项目搭建 仅供学习参考<br>在线教育行业是一个有着极强的广度和深度的行业，从校内到校外；从早幼教到职业培训；从教育工具到全信息化平台等等。</p><p>学成在线项目是本公司自研的一个专门针对成人职业技能教育的网络课堂系统，网站提供了成人职业技能培训的相关课程，如：软件开发培训、职业资格证书培训、成人学历教育培训等课程。项目基于B2B2C的业务模式，培训机构可以在平台入驻、发布课程，运营人员对发布的课程进行审核，审核通过后课程才可以发布成功，课程包括免费和收费两种形式，对于免费课程可以直接选课学习，对于收费课程在选课后需要支付成功才可以继续学习。</p><span id="more"></span><h4 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h4><p>本项目包括了用户端、机构端、运营端。</p><p>核心模块包括：内容管理、媒资管理、课程搜索、订单支付、选课管理、认证授权等。</p><p>下图是项目的功能模块图：</p><img src="https://xuecheng-rzf.oss-cn-beijing.aliyuncs.com/gitee_readme/%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97%E5%9B%BE.png" style="zoom:150%;" /><p>本项目采用前后端分离架构，后端采用SpringBoot、SpringCloud技术栈开发，数据库使用了MySQL，还使用的Redis、消息队列、分布式文件系统、Elasticsearch等中间件系统。</p><p>划分的微服务包括：内容管理服务、媒资管理服务、搜索服务、订单支付服务、 学习中心服务、系统管理服务、认证授权服务、网关服务、注册中心服务、配置中心服务等。</p><p>下图是项目的技术架构图：</p><img src="https://xuecheng-rzf.oss-cn-beijing.aliyuncs.com/gitee_readme/%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png" style="zoom:150%;" /><h4 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h4><ol><li>项目基于JDK1.8环境开发，使用Mavne构建项目工程</li></ol><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><ol><li><p>教学机构的老师登录教学管理平台，编辑课程信息，发布自己的课程。</p></li><li><p>平台运营人员登录运营平台审核课程、视频等信息，审核通过后课程方可发布。</p></li><li><p>课程发布后学生登录平台进行选课、在线学习。免费课程可直接学习，收费课程需要下单购买。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;学成在线&quot;&gt;&lt;a href=&quot;#学成在线&quot; class=&quot;headerlink&quot; title=&quot;学成在线&quot;&gt;&lt;/a&gt;学成在线&lt;/h1&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;本项目基于&lt;strong&gt;黑马程序员&lt;/strong&gt;的 &lt;em&gt;《学成在线》&lt;/em&gt; 项目搭建 仅供学习参考&lt;br&gt;在线教育行业是一个有着极强的广度和深度的行业，从校内到校外；从早幼教到职业培训；从教育工具到全信息化平台等等。&lt;/p&gt;
&lt;p&gt;学成在线项目是本公司自研的一个专门针对成人职业技能教育的网络课堂系统，网站提供了成人职业技能培训的相关课程，如：软件开发培训、职业资格证书培训、成人学历教育培训等课程。项目基于B2B2C的业务模式，培训机构可以在平台入驻、发布课程，运营人员对发布的课程进行审核，审核通过后课程才可以发布成功，课程包括免费和收费两种形式，对于免费课程可以直接选课学习，对于收费课程在选课后需要支付成功才可以继续学习。&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://rkdkxvnn.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目介绍" scheme="https://rkdkxvnn.github.io/tags/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://rkdkxvnn.github.io/2024/05/27/hello-world/"/>
    <id>https://rkdkxvnn.github.io/2024/05/27/hello-world/</id>
    <published>2024-05-27T13:49:58.027Z</published>
    <updated>2024-05-27T13:49:58.027Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
